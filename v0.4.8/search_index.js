var documenterSearchIndex = {"docs":
[{"location":"lib/docstrings/#Docstrings","page":"Docstrings","title":"Docstrings","text":"","category":"section"},{"location":"lib/docstrings/","page":"Docstrings","title":"Docstrings","text":"CurrentModule = TidierVest\r\nDocTestSetup = quote\r\n    using TidierVest\r\nend","category":"page"},{"location":"lib/docstrings/","page":"Docstrings","title":"Docstrings","text":"Modules = [TidierVest]","category":"page"},{"location":"lib/docstrings/#TidierVest.html_attrs-Tuple{HTMLDocument}","page":"Docstrings","title":"TidierVest.html_attrs","text":"Get an attribute\n\nhtml_attrs(html,string)\n\nInput:\n\nhtml – It can be HTMLDocument, HTMLElement or Vector{HTMLNode}\nstring::String (optional) – Define the attribute that you want to return, if not provided, it would try to return a list of the attributes.\n\nOutput\n\nIndicated attribute or a list of the available attributes\n\n\n\n\n\n","category":"method"},{"location":"lib/docstrings/#TidierVest.html_children-Tuple{HTMLDocument}","page":"Docstrings","title":"TidierVest.html_children","text":"Get the children of an html\n\nInput:\n\nhtml – It can be HTMLDocument, HTMLElement or Vector{HTMLNode}\n\nOutput\n\nIndicated attribute or a list of the available attributes\n\n\n\n\n\n","category":"method"},{"location":"lib/docstrings/#TidierVest.html_elements-Tuple{HTMLDocument, String}","page":"Docstrings","title":"TidierVest.html_elements","text":"Returns HTML elements\n\nhtml_elements(html,string)\n\nInput:\n\nhtml – It can be HTMLDocument, HTMLElement or Vector{HTMLNode}\nstring – It's the element in the HTML that you want to find. It can be a String or Vector{String}, if the latter, it will apply the function in sequence\n\nOutput\n\nYour HTML reduced to the element that you indicated\n\n\n\n\n\n","category":"method"},{"location":"lib/docstrings/#TidierVest.html_table-Tuple{Union{HTMLElement{:table}, Vector{HTMLNode}}}","page":"Docstrings","title":"TidierVest.html_table","text":"Takes some HTML and turns it into a DataFrame, only if there is a very clear HTML Table.\n\nhtmltable(tablehtml)\n\nInput:\n\ntable_html – Vector{HTMLNode}\n\nOutput\n\nA DataFrame\n\n\n\n\n\n","category":"method"},{"location":"lib/docstrings/#TidierVest.html_text-Tuple{HTMLDocument}","page":"Docstrings","title":"TidierVest.html_text","text":"Returns the text of an HTML but with some whitespaces\n\n\n\n\n\n","category":"method"},{"location":"lib/docstrings/#TidierVest.html_text2-Tuple{HTMLDocument}","page":"Docstrings","title":"TidierVest.html_text2","text":"Returns the text of an HTML, but cleaner than html_text\n\n\n\n\n\n","category":"method"},{"location":"lib/docstrings/#TidierVest.html_text3-Tuple{HTMLDocument}","page":"Docstrings","title":"TidierVest.html_text3","text":"Returns the text of an HTML.\n\nhtml_text3(html)\n\nInput:\n\nhtml – HTMLDocument, HTMLElement or Vector{HTMLNode}\n\nOutput\n\nA single String or a Vector{String} depending on the input\n\nIf you want/need whitespaces and other things, you can use htmltext or htmltext2\n\n\n\n\n\n","category":"method"},{"location":"lib/docstrings/#TidierVest.minimal_html-Tuple{AbstractString, AbstractString}","page":"Docstrings","title":"TidierVest.minimal_html","text":"minimal_html(html::AbstractString, title::AbstractString)::String\n\nTakes some HTML and turns it into a minimal HTML document.\n\nInput:\n\nhtml –  HTML string that goes in the body of the document\ntitle – title of the document\n\nOutput:\n\nhtml –  The complete HTML document\n\n\n\n\n\n","category":"method"},{"location":"lib/docstrings/#TidierVest.parse_html-Tuple{String}","page":"Docstrings","title":"TidierVest.parse_html","text":"Returns a parsed HTML from a string\n\nparse_html(str::String)::HTMLDocument\n\nInput:\n\nstr::String\n\nOutput\n\nHTMLDocument\n\n\n\n\n\n","category":"method"},{"location":"lib/docstrings/#TidierVest.read_html-Tuple{String}","page":"Docstrings","title":"TidierVest.read_html","text":"Returns a parsed HTML from an URL string\n\nreadhtml(url::String) readhtml(file::IOStream)\n\nInput:\n\nurl::String\n\nor\n\nfile::IOStreamr \n\nOutput\n\nHTMLDocument\n\n\n\n\n\n","category":"method"},{"location":"#TidierVest.jl","page":"Home","title":"TidierVest.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Web Scraping is a technique to get data from the internet. In this package you can do this to get data from a static HTML.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This is a port form tidyverse/Rvest","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using TidierVest\r\n\r\nstarwars = read_html(\"https://rvest.tidyverse.org/articles/starwars.html\")\r\n\r\ntitles = html_elements(starwars, [\"section\", \"h2\"]) |> html_text3\r\ntitles\r\n# 7-element Vector{String}:\r\n#  \"The Phantom Menace\"\r\n#  \"Attack of the Clones\"\r\n#  \"Revenge of the Sith\"\r\n#  ⋮\r\n#  \"Return of the Jedi\"\r\n#  \"The Force Awakens\"\r\n\r\nhtml = read_html(\"https://en.wikipedia.org/w/index.php?title=The_Lego_Movie&oldid=998422565\")\r\ntable = html_elements(html, \".tracklist\") |> html_table\r\ntable\r\n# 28×4 DataFrame\r\n#  Row │ No.     Title                              Performer(s)                       Length \r\n#      │ String  String                             String                             String \r\n# ─────┼──────────────────────────────────────────────────────────────────────────────────────\r\n#    1 │ 1.      \"Everything Is Awesome\"            Tegan and Sara featuring The Lon…  2:43   \r\n#    2 │ 2.      \"Prologue\"                                                            2:28   \r\n#    3 │ 3.      \"Emmett's Morning\"                                                    2:00   \r\n#    4 │ 4.      \"Emmett Falls in Love\"                                                1:11   \r\n#    5 │ 5.      \"Escape\"                                                              3:26\r\n#   ⋮  │   ⋮                     ⋮                                  ⋮                    ⋮\r\n#   25 │ 25.     \"Everything Is Awesome\"            Jo Li (Joshua Bartholomew and Li…  1:26\r\n#   26 │ 26.     \"Everything Is Awesome (unplugge…  Shawn Patterson and Sammy Allen    1:24\r\n#   27 │ 27.     \"Untitled Self Portrait\"           Will Arnett                        1:08\r\n#   28 │ 28.     \"Everything Is Awesome (instrume…                                     2:41\r\n#                                                                              19 rows omitted","category":"page"},{"location":"#Functions","page":"Home","title":"Functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"read_html(url::String)\nhtmlelements(html,string::String) or htmlelements(html,strings::Vector{String})\nhtmlattrs(html,string::String) or htmlattrs(html)\nhtmltext(html) or htmltext2(html) or html_text3(html)\nhtml_table(html)\nparse_html(string::String)\nminimal_html(html::AbstractString,title::AbstractString)","category":"page"},{"location":"#Tutorial","page":"Home","title":"Tutorial","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"First, we import","category":"page"},{"location":"","page":"Home","title":"Home","text":"using TidierVest, DataFrames, PlotlyJS","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then, scrape the data with html_elements, html_attrs and html_text3","category":"page"},{"location":"","page":"Home","title":"Home","text":"function get_scores(html)\r\n    score = html_elements(html,\".ipl-rating-star__rating\") |> html_text3 ## Read scores from HTML\r\n    score = score[score .!= \"Rate\" .&& occursin.(\".\",score)]  ## Get actual scores\r\n    scores::Vector{Float64} = parse.(Float64,score)    \r\n    return scores\r\nend\r\n\r\nfunction get_names(html)\r\n    names::Vector{String} = html_elements(html,[\".info\",\"strong\"]) |> html_text3 \r\n    return names\r\nend\r\n\r\nfunction get_imgs(html)\r\n    data = html_elements(html,[\"img\",\".zero-z-index\"])\r\n    imgs::Vector{String} = html_attrs(data,\"src\")\r\n    return imgs\r\nend\r\n\r\nfunction get_n_season(html)\r\n    data = read_html(html)\r\n    data = html_elements(data,[\"select\",\"option\"])[2] |> html_text3\r\n    n_season::Int = parse(Int,data)\r\n    return n_season\r\nend\r\n\r\nfunction get_df(url)\r\n    df::DataFrame = DataFrame()\r\n    n_seasons = get_n_season(url)\r\n    urls = url.*\"episodes?season=\".*string.(1:n_seasons)\r\n    for i in eachindex(urls)\r\n        html = read_html(urls[i])\r\n        temp_df = DataFrame(scores = get_scores(html),\r\n                  names = get_names(html),\r\n                  season = i,\r\n                  images = get_imgs(html))\r\n        df = [df;temp_df]\r\n    end\r\n    df[!,\"N\"]= rownumber.(eachrow(df))\r\n    return df\r\nend\r\n\r\nfunction plot_df(df,title)\r\n    return plot(df,\r\n                x = :N,\r\n                y = :scores,\r\n                text = :names,\r\n                color = :season, \r\n                mode = \"lines\",\r\n                labels=Dict(\r\n                    :N => \"Episode number\",\r\n                    :scores => \"Score\",\r\n                    :season => \"Season\"\r\n                ),\r\n                Layout(title = title* \" score on IMDb\")\r\n                )\r\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"community_df = get_df(\"https://www.imdb.com/title/tt1439629/\")\r\nplot_df(community_df,\"Community\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"<iframe src=\"plot_community.html\" style=\"height:500px;width:100%;\"></iframe>","category":"page"},{"location":"","page":"Home","title":"Home","text":"bojack_df = get_df(\"https://www.imdb.com/title/tt3398228/\")\r\nplot_df(bojack_df,\"Bojack Horseman\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"<iframe src=\"plot_bojack.html\" style=\"height:500px;width:100%;\"></iframe>","category":"page"}]
}
